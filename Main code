#include <bits/stdc++.h>
using namespace std;

struct Node {
    char data;
    int freq;
    Node* left;
    Node* right;

    Node(char data, int freq) {
        this->data = data;
        this->freq = freq;
        left = right = nullptr;
    }

    ~Node() {
        delete left;
        delete right;
    }
};

struct compare {
    bool operator()(Node* l, Node* r) {
        return (l->freq > r->freq);
    }
};

void printCodes(struct Node* root, string str, unordered_map<char, string>& huffmanCode) {
    if (!root)
        return;

    if (!root->left && !root->right) {
        huffmanCode[root->data] = str;
    }

    printCodes(root->left, str + "0", huffmanCode);
    printCodes(root->right, str + "1", huffmanCode);
}

unordered_map<char, string> buildHuffmanTree(string text) {
    unordered_map<char, int> freq;
    for (char ch : text)
        freq[ch]++;

    priority_queue<Node*, vector<Node*>, compare> pq;

    for (auto pair : freq) {
        pq.push(new Node(pair.first, pair.second));
    }

    while (pq.size() != 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top(); pq.pop();

        Node* top = new Node('$', left->freq + right->freq);
        top->left = left;
        top->right = right;
        pq.push(top);
    }

    Node* root = pq.top();

    unordered_map<char, string> huffmanCode;
    printCodes(root, "", huffmanCode);

    return huffmanCode;
}

string encode(string text, unordered_map<char, string>& huffmanCode) {
    string encodedString = "";
    for (char ch : text)
        encodedString += huffmanCode[ch];
    return encodedString;
}

string decode(string encodedStr, Node* root) {
    string decodedStr = "";
    Node* current = root;
    for (char bit : encodedStr) {
        if (bit == '0')
            current = current->left;
        else
            current = current->right;

        if (!current->left && !current->right) {
            decodedStr += current->data;
            current = root;
        }
    }
    return decodedStr;
}

Node* rebuildHuffmanTree(unordered_map<char, string>& huffmanCode) {
    Node* root = new Node('$', 0);
    for (auto pair : huffmanCode) {
        char ch = pair.first;
        string code = pair.second;
        Node* current = root;
        for (char bit : code) {
            if (bit == '0') {
                if (!current->left)
                    current->left = new Node('$', 0);
                current = current->left;
            }
            else {
                if (!current->right)
                    current->right = new Node('$', 0);
                current = current->right;
            }
        }
        current->data = ch;
    }
    return root;
}
// Main Function
int main() {
    string text;
    cout << "Enter text to encode: ";
    getline(cin, text);

    unordered_map<char, string> huffmanCode = buildHuffmanTree(text);

    cout << "Huffman Codes:\n";
    for (auto pair : huffmanCode)
        cout << pair.first << ": " << pair.second << "\n";

    string encodedString = encode(text, huffmanCode);
    cout << "\nEncoded String:\n" << encodedString << "\n";

    string encodedInput;
    cout << "\nEnter encoded string to decode: ";
    getline(cin, encodedInput);

    Node* root = rebuildHuffmanTree(huffmanCode);

    string decodedString = decode(encodedInput, root);
    cout << "\nDecoded String:\n" << decodedString << "\n";

    delete root;

    return 0;
}
